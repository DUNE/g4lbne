00001 
00002 
00003 
00004 
00005 
00006 
00007 #include "OscLib/func/EarthModel.h"
00008 #include "Utilities/func/MathUtil.h"
00009 #include <cstdlib>
00010 #include <iostream>
00011 #include <cmath>
00012 #include <list>
00013 using namespace osc;
00014 
00015 static const int kPREM   = 0;
00016 static const int kSTACEY = 1;
00017 
00018 EarthModel::EarthModel(const char* which, double tol) 
00019 {
00020   if      (std::string("PREM")  ==which) this->InitPREM();
00021   else if (std::string("STACEY")==which) this->InitStacey();
00022   // else if (std::string("ModelX")==which) this->InitModelX();
00023   else {
00024     std::cerr << __FILE__ << ":" << __LINE__ 
00025               << " Model '" << which << "' is not supported." 
00026               << " Currently only PREM is supported." << std::endl;
00027     abort();
00028   }
00029   this->MakeLayers(tol);
00030 }
00031 
00032 //......................................................................
00039 double EarthModel::Ne(double r) 
00040 {
00041   return this->ZoverA(r)*this->Density(r);
00042 }
00043 
00044 //......................................................................
00048 double EarthModel::Density(double r) 
00049 {
00050   switch (fModelID) {
00051   case kPREM:   return this->DensityPREM(r);
00052   case kSTACEY: return this->DensityStacey(r);
00053   default:      abort();
00054   }
00055   return 0.0;
00056 }
00057 
00058 //......................................................................
00065 void EarthModel::InitPREM()
00066 {
00067   fModelID      = kPREM;
00068   fRouterCore   = 3480.0;
00069   fRearth       = 6371.0;
00070 
00071   fRregion.push_back(0.0);
00072   fRregion.push_back(1221.5); // Inner core
00073   fRregion.push_back(3480.0); // Outer core
00074   fRregion.push_back(3630.0); // D''
00075   fRregion.push_back(5701.0); // Lower mantle
00076   fRregion.push_back(6151.0); // Transition zone
00077   fRregion.push_back(6291.0); // Low velocity zone
00078   fRregion.push_back(6346.6); // LID
00079   fRregion.push_back(6368.0); // Crust
00080   fRregion.push_back(6371.0); // Ocean
00081 }
00082 
00083 //......................................................................
00094 double EarthModel::DensityPREM(double r) 
00095 {
00096   double x = r/fRearth;
00097   
00098   // The regions are checked in order from largest to smallest
00099   if (r>1221.5&&r<=3480.0) return 12.5815+x*(-1.2638+x*(-3.6426+x*(-5.5281)));
00100   if (r>3480.0&&r<=5701.0) return  7.9565+x*(-6.4761+x*(5.5283+x*(-3.0807)));
00101   if (r<=1221.5)           return 13.0885-8.8381*x*x;
00102   if (r>5771.0&&r<=5971.0) return 11.2494-8.0298*x;
00103   if (r>5971.0&&r<=6151.0) return  7.1089-3.8045*x;
00104   if (r>6151.0&&r<=6291.0) return  2.6910+0.6924*x;
00105   if (r>5701.0&&r<=5771.0) return  5.3197-1.4836*x;
00106   if (r>6291.0&&r<=6346.6) return  2.6910+0.6924*x;
00107   if (r>6346.6&&r<=6356.0) return  2.90;
00108   if (r>6356.0&&r<=6368.0) return  2.60;
00109   if (r>6368.0&&r<=6371.0) return  1.020;
00110   return 0.0;
00111 }
00112 
00113 //......................................................................
00122 void EarthModel::InitStacey()
00123 {
00124   fModelID      = kSTACEY;
00125   fRouterCore   = 6371.0-2878.0;
00126   fRearth       = 6371.0;
00127 
00128   fRregion.push_back(0.0);
00129   fRregion.push_back(6371.0-5121.0); // Inner core
00130   fRregion.push_back(6371.0-2878.0); // Outer core
00131   fRregion.push_back(6371.0-650.0);  // Lower mantle
00132   fRregion.push_back(6371.0-350.0);  // Middle mantle
00133   fRregion.push_back(6371.0-15.0);   // Upper mantle
00134   fRregion.push_back(6371.0);        // Crust
00135 }
00136 
00137 //......................................................................
00143 double EarthModel::DensityStacey(double r)
00144 {
00145   static double crustD[2] = {       0.0,
00146                                     15.0};
00147   static double upperMantleD[6] = { 15.0,
00148                                     60.0,
00149                                     100.0,
00150                                     200.0,
00151                                     300.0, 
00152                                     350.0};
00153   static double middleMantleD[6] = {350.0,
00154                                     400.0,
00155                                     413.0,
00156                                     500.0,
00157                                     600.0, 
00158                                     650.0};
00159   static double lowerMantleD[14] = {650.0,
00160                                     800.0,
00161                                     984.0,
00162                                     1000.0,
00163                                     1200.0, 
00164                                     1400.0,
00165                                     1600.0,
00166                                     1800.0,
00167                                     2000.0,
00168                                     2200.0, 
00169                                     2400.0,
00170                                     2600.0,
00171                                     2800.0,
00172                                     2878.0};
00173   static double outerCoreD[14] = {  2878.0,
00174                                     3000.0,
00175                                     3200.0,
00176                                     3400.0,
00177                                     3600.0, 
00178                                     3800.0,
00179                                     4000.0,
00180                                     4200.0,
00181                                     4400.0,
00182                                     4600.0, 
00183                                     4800.0,
00184                                     4982.0,
00185                                     5000.0,
00186                                     5121.0};
00187   static double innerCoreD[8] ={    5121.0,
00188                                     5200.0,
00189                                     5400.0,
00190                                     5600.0,
00191                                     5800.0, 
00192                                     6000.0,
00193                                     6200.0,
00194                                     6371.0};
00195   static double crustRho[2] =       { 2.840,
00196                                       2.840};
00197   static double upperMantleRho[6] = { 3.313,
00198                                       3.332,
00199                                       3.348,
00200                                       3.387,
00201                                       3.424,
00202                                       3.441};
00203   static double middleMantleRho[6] = {3.700,
00204                                       3.775,
00205                                       3.795,
00206                                       3.925,
00207                                       4.075, 
00208                                       4.150};
00209   static double lowerMantleRho[14] = {4.200,
00210                                       4.380,
00211                                       4.529,
00212                                       4.538,
00213                                       4.655,
00214                                       4.768,
00215                                       4.877,
00216                                       4.983,
00217                                       5.087,
00218                                       5.188,
00219                                       5.288,
00220                                       5.387,
00221                                       5.487,
00222                                       5.527};
00223   static double outerCoreRho[14] = {  9.927,
00224                                       10.121,
00225                                       10.421,
00226                                       10.697,
00227                                       10.948, 
00228                                       11.176,
00229                                       11.383,
00230                                       11.570,
00231                                       11.737,
00232                                       11.887, 
00233                                       12.017,
00234                                       12.121,
00235                                       12.130,
00236                                       12.197};
00237   static double innerCoreRho[7] = {   12.229,
00238                                       12.301,
00239                                       12.360,
00240                                       12.405,
00241                                       12.437, 
00242                                       12.455,
00243                                       12.460};
00244   // ============ END DENSITY TABLE ============
00245   
00246   if (r>fRearth) return 0.0;
00247   double       d = fRearth-r; // Table uses depth
00248   register int i;
00249   
00250   if (d>=crustD[0] && d<crustD[1]) {
00251     for (i=0; i<1; ++i) {
00252       if (d>=crustD[i] && d<crustD[i+1]) {
00253         return crustRho[i];
00254       }
00255     }
00256   }
00257   if (d>=upperMantleD[0] && d<upperMantleD[5]) {
00258     for (i=0; i<5; ++i) {
00259       if (d>=upperMantleD[i] && d<upperMantleD[i+1]) {
00260         return upperMantleRho[i];
00261       }
00262     }
00263   }
00264   if (d>=middleMantleD[0] && d<middleMantleD[5]) {
00265     for (i=0; i<5; ++i) {
00266       if (d>=middleMantleD[i] && d<middleMantleD[i+1]) {
00267         return middleMantleRho[i];
00268       }
00269     }
00270   }
00271   if (d>=lowerMantleD[0] && d<lowerMantleD[13]) {
00272     for (i=0; i<13; ++i) {
00273       if (d>=lowerMantleD[i] && d<lowerMantleD[i+1]) {
00274         return lowerMantleRho[i];
00275       }
00276     }
00277   }
00278   if (d>=outerCoreD[0] && d<outerCoreD[13]) {
00279     for (i=0; i<13; ++i) {
00280       if (d>=outerCoreD[i] && d<outerCoreD[i+1]) {
00281         return outerCoreRho[i];
00282       }
00283     }
00284   }
00285   if (d>=innerCoreD[0] && d<innerCoreD[7]) {
00286     for (i=0; i<7; ++i) {
00287       if (d>=innerCoreD[i] && d<innerCoreD[i+1]) {
00288         return innerCoreRho[i];
00289       }
00290     }
00291   }
00292   return 0.0;
00293 }
00294 
00295 //......................................................................
00305 double EarthModel::ZoverA(double r) 
00306 {
00307   if (r<fRouterCore) return 0.468;
00308   return 0.497;
00309 }
00310 
00311 //......................................................................
00312 
00313 double EarthModel::AveNe(double r1, double r2, int nsample)
00314 {
00315   double sum = 0.0;
00316   double r;
00317   for (int i=0; i<nsample; ++i) {
00318     r = r1 + (r2-r1)*((float)i+0.5)/(float)nsample;
00319     sum += this->Ne(r);
00320   }
00321   return sum/(float)nsample;
00322 }
00323 
00324 //......................................................................
00329 void EarthModel::MakeLayers(double tol) 
00330 {
00331   unsigned int nsample = 20;
00332   for (unsigned int i=0; i<fRregion.size()-1; ++i) {
00333     // Add layers within each region until all layers are within
00334     // tolerance
00335     double rRegionLo = fRregion[i];
00336     double rRegionHi = fRregion[i+1];
00337     double r1 = rRegionLo;
00338     double r2 = rRegionHi;
00339     double r;
00340     double ne;
00341     while (1) {
00342       double ave  = this->AveNe(r1, r2, nsample);
00343       bool   isok = true;
00344       for (unsigned int j=0; j<nsample; ++j) {
00345         r = r1+(r2-r1)*((float)j+0.5)/(float)nsample;
00346         ne = this->Ne(r);
00347         if (fabs(ne-ave)/ne>tol) { isok = false; break; }
00348       }
00349       if (isok) {
00350         // Layer is within tolerance - accept it
00351         fRlo.push_back(r1);
00352         fRhi.push_back(r2);
00353         fNe. push_back(ave);
00354         if (r2>=rRegionHi) {
00355           // Finished subdividing this region
00356           break;
00357         }
00358         else {
00359           // Ready next iteration of subdivision
00360           r1 = r2;
00361           r2 = rRegionHi;
00362         }
00363       } // if (isok) ...
00364       else {
00365         // Layer is not within tolerance - reduce its size
00366         r2 -= 1.0; // Step back some distance (km) and try again
00367         if (r2<=r1) r2 = r1+0.5;
00368       }
00369     } // making layers within region
00370   } // loop on regions
00371 }
00372 
00373 //......................................................................
00374 
00375 void EarthModel::GetLayers(std::vector<double>& rlo,
00376                            std::vector<double>& rhi,
00377                            std::vector<double>& ne)
00378 {
00379   rlo.resize(fRlo.size());
00380   rhi.resize(fRlo.size());
00381   ne. resize(fRlo.size());
00382   for (unsigned int i=0; i<fRlo.size(); ++i) {
00383     rlo[i] = fRlo[i];
00384     rhi[i] = fRhi[i];
00385     ne[i]  = fNe[i];
00386   }
00387 }
00388 
00389 //......................................................................
00398 void EarthModel::LineProfile(double anu,
00399                              double cosQ,
00400                              double adet,
00401                              std::list<double>& Ls,
00402                              std::list<double>& Ns)
00403 {
00404   // A typical number density for the crust
00405   static const double crustNe = 2.6*0.5;
00406   
00407   // Locations are relative to a cicular Earth centered at (0,0)
00408   double rdet; // Radial location of detector (km)
00409   double rnu;  // Radial location of neutrino (km)
00410   double Lnu;  // Total flight distance of neutrino (km)
00411   double x1;   // Location of detector (km)
00412   double y1;   // Location of detector (km)
00413   double x2;   // Location of neutrino production (km)
00414   double y2;   // Location of neutrino production (km)
00415   
00416   rdet = fRearth+adet;
00417   rnu  = fRearth+anu;
00418   Lnu  = rdet*(sqrt(util::sqr(rnu/rdet)+cosQ*cosQ-1.0)-cosQ);
00419 
00420   x2 = 0.0;
00421   y2 = rdet;
00422   x1 = x2+sqrt(1.0-cosQ*cosQ)*Lnu;
00423   y1 = y2+cosQ*Lnu;
00424   
00425   unsigned int i;
00426   int n1, n2;
00427   double L;
00428   double xina,  yina;
00429   double xouta, youta;
00430   double xinb,  yinb;
00431   double xoutb, youtb;
00432   Ls.clear();
00433   Ns.clear();
00434 
00435   //
00436   // For down-going neutrinos, only consider matter in the top layer
00437   //
00438   if (cosQ>=0.0) {
00439     if (adet>0.0) {
00440       Ls.push_back(Lnu);
00441       Ns.push_back(0.0);
00442     }
00443     else {
00444       n1 = this->IntersectLineAndCircle(x1, y1, x2, y2, fRearth,
00445                                         &xouta, &youta, &xoutb, &youtb);
00446       L = util::pythag(x1-xoutb, y1-youtb);
00447       Ls.push_back(L);
00448       Ns.push_back(0.0);
00449       
00450       L = util::pythag(x2-xoutb, y2-youtb);
00451       Ls.push_back(L);
00452       Ns.push_back(crustNe); // Typical rock density
00453     }
00454     return;
00455   }
00456   
00457   //
00458   // For up-going neutrinos, find the intersections of the neutrino's
00459   // path with all layers of the Earth model.
00460   //
00461   for (i=0; i<fRhi.size()-1; ++i) {
00462     n1 = this->IntersectLineAndCircle(x1, y1, x2, y2, fRhi[i],
00463                                       &xouta, &youta, &xoutb, &youtb);
00464     
00465     n2 = this->IntersectLineAndCircle(x1, y1, x2, y2, fRlo[i],
00466                                       &xina, &yina, &xinb, &yinb);
00467     //
00468     // Create segments for each layer we intersect
00469     //
00470     if (n1==2 && n2<2) {
00471       //
00472       // Intersect outer radius, but not inner radius: 
00473       // Only one one segment to create.
00474       //
00475       L = util::pythag(xouta-xoutb, youta-youtb);
00476       
00477       Ls.push_back(L);
00478       Ns.push_back(fNe[i]);
00479     }
00480     else if (n1==2 && n2==2) {
00481       //
00482       // Path intersects both inner and outer radii: Two sections to
00483       // create, one on the way in, one on the way out.
00484       //
00485       L = util::pythag(xouta-xina, youta-yina);
00486       Ls.push_front(L);
00487       Ns.push_front(fNe[i]);
00488       
00489       L = util::pythag(xoutb-xinb, youtb-yinb);
00490       Ls.push_back(L);
00491       Ns.push_back(fNe[i]);
00492     }
00493   } // Loop on all but last layer
00494   
00495   //
00496   // Handle the last layer specially
00497   //
00498   i = fRhi.size()-1;
00499   n1 = this->IntersectLineAndCircle(x1, y1, x2, y2, fRhi[i],
00500                                     &xouta, &youta, &xoutb, &youtb);
00501   n2 = this->IntersectLineAndCircle(x1, y1, x2, y2, fRlo[i],
00502                                     &xina, &yina, &xinb, &yinb);
00503   if (n1==2 && n2<2) {
00504     //
00505     // Intersect outer radius, but not inner radius: 
00506     // One one segment to create
00507     //
00508     if (youtb>y2) {
00509       //
00510       // Don't over shoot the detector location
00511       //
00512       L = util::pythag(xouta-x2, youta-y2);
00513     }
00514     else {
00515       L = util::pythag(xouta-xoutb, youta-youtb);
00516     }
00517     Ls.push_back(L);
00518     Ns.push_back(fNe[i]);
00519   }
00520   else if (n1==2 && n2==2) {
00521     //
00522     // Path intersects both inner and outer radii: Two sections to
00523     // create, one on the way in, one on the way out.
00524     //
00525     L = util::pythag(xouta-xina, youta-yina);
00526     Ls.push_front(L);
00527     Ns.push_front(fNe[i]);
00528     
00529     if (youtb>y2) {
00530       //
00531       // Don't over shoot the detector location
00532       //
00533       L = util::pythag(x2-xinb, y2-yinb);
00534     }
00535     else {
00536       L = util::pythag(xoutb-xinb, youtb-yinb);
00537     }
00538     Ls.push_back(L);
00539     Ns.push_back(fNe[i]);
00540   }  
00541   //
00542   // Add segment to get neutrino from production to Earth's surface
00543   //
00544   L = util::pythag(xouta-x1, youta-y1);
00545   Ls.push_front(L);
00546   Ns.push_front(0.0); // Density of air~=0
00547   
00548   //
00549   // If required, add segment to get from sea level up to the
00550   // detector's position
00551   //
00552   if (youtb<y2) {
00553     L = util::pythag(xoutb-x2, youtb-y2);
00554     Ls.push_back(L);
00555     Ns.push_back(crustNe); // Density of of standard rock (mole/cm^3)
00556   }
00557 
00558   //
00559   // The following is a useful piece of debugging - check that we've
00560   // accounted for all pieces of the neutrino flight distance
00561   //
00562   if (false) {
00563     std::list<double>::iterator itr(Ls.begin());
00564     std::list<double>::iterator itrEnd(Ls.end());
00565     double ltot = 0.0;
00566     for (; itr!=itrEnd; ++itr) {
00567       ltot += (*itr);
00568     }
00569     std::cout << ltot << " " << Lnu << std::endl;
00570     if (fabs(ltot-Lnu)>1e-6) abort();
00571   }
00572 }
00573 
00574 //......................................................................
00575 
00576 int EarthModel::IntersectLineAndCircle(double  x1, double  y1,
00577                                        double  x2, double  y2,
00578                                        double  r,
00579                                        double* xa, double* ya,
00580                                        double* xb, double* yb) 
00581 {
00582   double dx    = x2-x1;
00583   double dy    = y2-y1;
00584   double drsqr = dx*dx + dy*dy;
00585   double D     = x1*y2 - x2*y1;
00586   double arg   = r*r*drsqr - D*D;
00587   if (arg<0.0) return 0;
00588 
00589   double sgndy = 1.0;
00590   if (dy<0.0) sgndy = -1.0;
00591 
00592   *xa = ( D*dy - sgndy * dx * sqrt(arg) ) / drsqr;
00593   *ya = (-D*dx - fabs(dy)   * sqrt(arg) ) / drsqr;
00594   *xb = ( D*dy + sgndy * dx * sqrt(arg) ) / drsqr;
00595   *yb = (-D*dx + fabs(dy)   * sqrt(arg) ) / drsqr;
00596 
00597   if (arg==0.0) return 1;
00598   return 2;
00599 }
00600 
